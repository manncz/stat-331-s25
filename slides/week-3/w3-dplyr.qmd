---
title: "Data Cleaning & Manipulation"
format: 
  revealjs:
        theme: [default, ../slide_custom.scss]
        auto-stretch: true
editor: source
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
library(palmerpenguins)
data(penguins)
library(knitr)
```

## Tuesday, April 15

Today we will...

+ Comments from Week 2
+ New Material
  + Data wrangling
  + Introduce the `dplyr` package.
  + Use `dplyr` verbs to manipulate data.
+ PA 3: Identify the Mystery College


:::callout-tip
## Follow along

Remember to download, save, and open up the [starter notes](../../student-versions/notes/w3-notes.qmd) for this week!
:::


## Questions from Week 2?


![Stat departmnet joke of the week by Syliva Du. Image created with AI.](images/plotting.png)

## Check-in 3.1 Question 8

- While the following code *runs* it does not do what we want:


```{r}
#| echo: true
#| warning: true

penguins |> 
  filter(species == "Adelie") |> 
  select(body_mass_g) |> 
  mean(na.rm = T)
```

- We will learn how to fix this code on Thursday

- I will go back and fix grades. Either choosing "Line 4" or "No error" will be considered correct.

## Style Note of the Day - [Spacing](https://style.tidyverse.org/syntax.html#spacing)

:::{.incremental}
- Always put a space after a comma, but never before
- Surround `=` with spaces when naming arguments
- Surround many mathematical operators (`+`, `-`, `*`) with spaces (but not all!)
- Don't include spaces around parentheses for function calls (although you may include a new-line)
:::

## Style Note of the Day - [Spacing](https://style.tidyverse.org/syntax.html#spacing)

Nice:
```{r}
#| echo: true
#| eval: false

mean(x, na.rm = TRUE)

height <- (feet * 12) + inches

2^2
```

No thank you:
```{r}
#| echo: true
#| eval: false

mean(x,na.rm=TRUE)
mean( x , na.rm = TRUE )
mean (x, na.rm = TRUE)

height<-(feet*12)+inches

2 ^ 2
```

<!--## Citing Your Sources

When you write code, you will **need** to reference function/package documentation and external resources.

+ This is part of being a programmer!

. . .

When you rely on external resources for an assignment in this course, **you must cite your sources**.

+ If you use **any** resources outside of the course text, the course slides, and the posted cheatsheets, you **must include a citation**!
+ You will lose points if you do not.
-->



# Data Wrangling with `dplyr`

```{r}
#| echo: false
#| fig-cap: "(Allison Horst)"
knitr::include_graphics("https://raw.githubusercontent.com/allisonhorst/stats-illustrations/main/rstats-artwork/data_cowboy.png")
```

## Demonstration Data --  [Cereal](https://search.r-project.org/CRAN/refmans/liver/html/cereal.html)

```{r}
#| echo: true
library(liver)
data(cereal)
```

. . .

::: panel-tabset

### Data Structure

```{r}
#| echo: true
str(cereal, give.attr = FALSE)
```

### Head of the Data

```{r}
#| echo: true
#| eval: false
head(cereal) 
```

```{r}
#| echo: false
head(cereal) |> 
  kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```
### Data Summary

```{r}
#| echo: true
summary(cereal)
```

:::




## Before jumping in to code...

**In groups**, write a game plan or describe in words steps you would take from `cereal` data to get the output for each of the following:

1. What is the ratio of fiber to sugars in each cereal?

2. Create a new dataset that only has Nabisco cereals and displays the protein, fat, and sodium in each.

3. Create a table that shows, for each manufacturer the average and standard deviation of the grams of sugar in their cereals, along with how many cereals are in the data for each manufacturer. Order the table from most sugar (on average) to least.


## `dplyr`

`dplyr` is part of the **tidyverse** that provides us with the *Grammar of Data Manipulation*.

+ This package gives us the tools to **wrangle, manipulate, and tidy** our data with ease.
+ Check out the `dplyr` [cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf).

```{r}
#| echo: false
#| fig-align: center
knitr::include_graphics("images/dplyr.png")

```

## `dplyr` verbs

+ `filter()` -- **select rows** based on their values
+ `arrange()` -- **sort rows** based on their values
+ `select()` -- **select columns**
+ `mutate()` -- **add new columns** by transforming other columns
+ `summarize()` -- perform **summary operations** on columns
+ `group_by()` -- facilitate **group-wise operations**

. . .

Use the **pipe operator** (`|>` or `%>%`) to chain together data wrangling operations.

## Match the dplyr verb

**In groups** match the `dplyr` verbs to your suggested steps:

1. What is the ratio of fiber to sugars in each cereal?

2. Create a new dataset that only has Nabisco cereals and displays the protein, fat, and sodium in each.

3. Create a table that shows, for each manufacturer the average and standard deviation of the grams of sugar in their cereals, along with how many cereals are in the data for each manufacturer. Order the table from most sugar (on average) to least.

# The Pipe Operator

>No matter how complex and polished the individual operations are, it is often the quality of the glue that most directly determines the power of the system.
>
>â€” Hal Abelson



## The Pipe Operator

+ The pipe specifies a sequence of operations.
+ The output from one operation is passed (piped) into the first argument of the next operation.

. . .


These are equivalent: 

:::: {.columns}
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false
summary(cereal)
```

:::
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false
cereal |> 
  summary()
```

:::
::::

## The Pipe Operator
::: {.incremental}

+ The "original" pipe: `%>%`

  + Loaded with `tidyverse` package (part of `magrittr`).

+ The "native" pipe: `|>`

  + Created in `R` version 4.1.0.
  + `Tools` > `Global Options...` > `Code` > check `Use native pipe operator` box to use keyboard shortcut:
      + `ctrl/cmd` + `shift` + `m`
:::



## The Pipe Operator

+ With `dplyr`, your code should read **like a sentence**.

+ The **data** is the primary object in your sentence, so it should **come first in your code**.

+ The **pipe operator** is an important part of that readability.

. . .

```{r}
#| eval: false
#| echo: true
dr_c |>
  bake_a_dessert()
```

. . .


```{r}
#| eval: false
#| echo: true
dr_c |>
  put_on("apron") |>
  bake_a_dessert(type = "cake")
```

. . . 

SO MUCH better than:

```{r}
#| eval: false
#| echo: true
  bake_a_dessert(put_on(dr_c, "apron"), type = "cake")
```



## Data Comes First!

`dplyr` verbs are designed for piping!


+ `filter(.data = cereal, ...)`
+ `select(.data = cereal, ...)`
+ `mutate(.data = cereal, ...)`



<br>

. . .

**The pipe operator is your friend!**
<!--
You can also pipe manipulated data or summaries directly into your `ggplot2` code for plotting.
-->

# `filter()`

```{r}
#| fig-align: center
#| fig-cap: "(Allison Horst)"
knitr::include_graphics("https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_filter.jpg")
```


## `filter()`

We **filter** to the rows (observations) we would like to **keep** in the data.

. . .

```{r}
#| echo: true
#| eval: false
cereal |> 
  filter(sugars < 5)
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  filter(sugars < 5) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## `filter()`

We can add **multiple filters** to our data, to get a more specific subset.

```{r}
#| echo: true
#| eval: false
cereal |> 
  filter(sugars < 5,
         type == "hot")
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  filter(sugars < 5,
         type == "hot") |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## `filter()`: Handy Helpers!

+ `>` -- greater than
+ `<` -- less than
+ `==` -- equal to
+ `!` -- not
+ `%in%` -- checks if an element belongs to a vector
+ `is.na()` -- binary evaluation of missing values

. . .

+ `&` and `,` -- and
+ `|` -- or

## `filter()`: `|`

```{r}
#| echo: true
#| eval: false
cereal |> 
  filter(sugars < 5,
         type == "hot")
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  filter(sugars < 5,
         type == "hot") |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 25)
```

. . .

What if I wanted **either** non-sugary cereals **or** hot cereals...

```{r}
#| echo: true
#| eval: false
#| code-fold: true
cereal |> 
  filter(sugars < 5 |
           type == "hot")
```


## `filter()`: `%in%`

Are you interested in observations with values in multiple levels?

. . .

```{r}
#| echo: true
#| eval: false
cereal |> 
  filter(name %in% c("Cheerios", "Cinnamon Toast Crunch", "Raisin Bran", "Cracklin' Oat Bran"))
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  filter(name %in% c("Cheerios", "Cinnamon Toast Crunch", "Raisin Bran", "Cracklin' Oat Bran")) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## `filter()`: Related Functions

These functions select rows by **row number**.

+ `slice()` -- select rows with the specified indicies
+ `slice_head()` -- select the first `n` rows
+ `slice_tail()` -- select the last `n` rows
+ `slice_sample()` -- randomly select `n` rows



# `arrange()`


## `arrange()`

We **arrange** the rows of the data in order of a particular variable.

. . .

<br> 

```{r}
#| echo: true
#| eval: false
cereal |> 
  arrange(sodium)
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  arrange(sodium) |>
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## `arrange()`

We can arrange by **multiple** variables.

. . .

<br>

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1-2"
cereal |> 
  arrange(sodium, sugars) |>
  select(name:type, sodium, sugars)
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  arrange(sodium, sugars) |>
  select(name:type, sodium, sugars) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## `arrange()`: Descending Order

Default is ascending order...

```{r}
#| echo: true
#| eval: false
cereal |> 
  arrange(sodium)
```

<br>

...but can add `desc()` to get descending order! 

```{r, eval = FALSE}
#| echo: true
cereal |> 
  arrange(desc(sodium))
```


## `arrange()`: Related Functions

These functions implicitly arrange the data before slicing it (selecting rows).

+ `slice_min()` -- select rows with the lowest value(s) of a variable
+ `slice_max()` -- select rows with the highest value(s) of a variable



## `slice_max()`

Selects the `n` rows with the maximum values of the specified variable.

```{r}
#| echo: true
#| eval: false
cereal |> 
  slice_max(order_by = sugars, n = 3)
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  slice_max(order_by = sugars, n = 3) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

```{r}
#| echo: true
#| eval: false
cereal |> 
  slice_max(order_by = sugars, n = 3, with_ties = FALSE)
```

## Efficiency note

Use `slice_max()`/`slice_min()`:

```{r}
#| echo: true
#| eval: false
cereal |> 
  slice_max(order_by = sugars, n = 3)
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  slice_max(order_by = sugars, n = 3) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "150px") |> 
  kableExtra::kable_styling(font_size = 20)
```

Not `arrange()` and `slice_head()`:

```{r}
#| echo: true
#| eval: false
cereal |> 
  arrange(desc(sugars)) |> 
  slice_head(n = 3)
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  arrange(desc(sugars)) |> 
  slice_head(n = 3) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "150px") |> 
  kableExtra::kable_styling(font_size = 20)
```

# `select()`


## `select()`

We **select** which variables we would like to remain in the data.

. . .

```{r}
#| eval: false
#| echo: true
cereal |> 
  select(name, manuf, calories, cups)
```

```{r}
#| echo: false
cereal |> 
  select(name, manuf, calories, cups)  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## `select()`

You can use `:` to select a sequence of columns.

```{r}
#| echo: true
#| eval: false
cereal |> 
  select(name:calories)
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  select(name:calories)  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

You can **remove** columns from the dataset using a `-`. 

```{r}
#| echo: true
#| eval: false
cereal |> 
  select(-rating)
```

## `select()`: Reordering

You can reorder columns inside of `select()`.

```{r}
#| echo: true
#| eval: false
cereal |> 
  select(name, rating, manuf, type, calories, cups, weight,
         everything())
```

```{r}
#| echo: false
cereal |> 
  select(name, rating, manuf, type, calories, cups, weight,
         everything()) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## `select()`: Handy Helpers!

- `everything()` -- selects all columns **that you have not already specified**
- `starts_with()` -- selects columns with names that **start with** the specified string
- `ends_with()` -- selects columns with names that **end with** the specified string
- `contains()` -- selects columns with names that **contain** the specified string
- `where()` -- applies a function to all variables and selects those for which the function returns TRUE

See the help file for `select()`!


## `rename()`

- You can rename columns with `select()`, but all columns not specified will be dropped.
  * Using the `rename()` function is easier! 

```{r}
#| echo: true
#| eval: false
cereal |> 
  rename(temp = type)
```

```{r}
#| echo: false
cereal |> 
    rename(temp = type) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```




# `mutate()`

```{r}
#| fig-align: center
#| fig-cap: "(Allison Horst)"
knitr::include_graphics("https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_mutate.png")
```


## `mutate()`

The dataset gets **mutated** to either **include a new variable**...

```{r}
#| eval: false
#| echo: true
cereal |> 
  mutate(potass_per_cup = potass / cups)
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  mutate(potass_per_cup = potass / cups)  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

...OR **revise an existing variable**.

```{r}
#| eval: false
#| echo: true
cereal |> 
  mutate(shelf = as.factor(shelf))
```

## `mutate()`: Handy Helpers!

+ `if_else()` or `case_when()` -- shortcut for `if-else` loop
+ `as.factor()`, `as.numeric()`, etc. -- change variable type
+ `+`, `-`, `*`, `/` -- basic mathematical operations
+ `%%` -- modulo (returns the remainder when doing division)




# `summarize()`



## `summarize()`

We can calculate **summaries** of variables in the data.

. . .

```{r}
#| echo: true
#| eval: true
cereal |> 
  summarise(mean_fiber = mean(fiber))
```

. . .

Or **multiple** summaries at the same time.

```{r}
#| echo: true
cereal |> 
summarise(mean_fiber = mean(fiber),
          num_cereals = n(),
          mean_sugar = mean(sugars))
```

. . .

::: callout-note
`summarize()` and `summarise()` are synonyms!
:::


## `summarize()`: Handy Helpers!

- `mean()`, `median()`, `sd()`, `sum()`
- `min()`, `max()`
- `n()`, `n_distinct()` -- counts the number of (distinct) elements
- `first()`, `last()`, `nth()` -- extract the first, last, or nth element
- `across()` -- apply a function **across** columns

# `group_by()`

`summarize()` is almost always paired with `group_by()`!

```{r}
#| fig-align: center
#| fig-cap: "(Allison Horst)"
knitr::include_graphics("https://raw.githubusercontent.com/allisonhorst/stats-illustrations/main/rstats-blanks/ungroup_blank.png")
```


## `group_by()`

**Separate** the data into different groups based on a **categorical** variable.

. . .

* The data gets grouped, but nothing happens externally if used on its own.

```{r}
#| echo: true
#| eval: false
cereal |> 
  group_by(type)
```

```{r}
#| eval: true
#| echo: false
cereal |> 
    group_by(type)  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```



## `group_by() + summarize()`!

1. `group_by` a variable (or multiple variables)
2. `summarize` a variable (or multiple variables) **within** the groups

```{r}
#| echo: true
#| eval: false
cereal |> 
  group_by(manuf) |> 
  summarise(mean_sugar = mean(sugars))
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  group_by(manuf) |> 
  summarise(mean_sugar = mean(sugars))  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## `group_by() + mutate()`!

1. `group_by` a variable (or multiple variables)
2. `mutate` a variable (or multiple variables) **within** the groups

```{r}
#| echo: true
#| eval: false
cereal |> 
  group_by(manuf) |> 
  mutate(mean_sugar = mean(sugars))
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  group_by(manuf) |> 
  mutate(mean_sugar = mean(sugars))  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```



## `mutate()` vs `summarise()`

<br>

`group_by() + summarize()` **collapses** the data.

+ You will only have **one row per group** remaining.
+ You will only have **one column for each grouping variable, plus** each variable that you specified in summarize.

. . .

`group_by() + mutate()` does not.

+ You will have the **full number of rows** remaining.
+ You will have the **full number of columns remaining, plus** additional columns you created.

## `mutate()` vs `summarise()`

::: panel-tabset

### `summarise()`

![](images/summarise-sketch.JPG){width=85%}

### `mutate()`

![](images/mutate-sketch.JPG)
:::

## Quick check

How many **rows** and **columns** will each of these data frames have?

```{r}
#| echo: true
#| eval: false

cereal |> 
  group_by(manuf) |> 
  mutate(fiber_carb_rat = mean(fiber / carbo))
```

<br>

```{r}
#| echo: true
#| eval: false

cereal |> 
  group_by(manuf) |> 
  summarize(fiber_carb_rat = mean(fiber / carbo))
```

<br>

:::callout-tip
The `cereal` data starts with 77 rows and 16 columns. There are 7 manufacturers in the data.
:::


## `ungroup()`

The `ungroup()` function will remove the internal grouping in your data.


:::{.incremental}
+ Useful if you want to create a different grouping
+ This is not something that you always need to do.
+ Tip: if you are getting unexpected output downstream from a `group_by()` statement, try ungrouping your data!
:::


# Putting it All Together

## Glue it all together!

```{r}
#| echo: true
#| eval: false
cereal |> 
  filter(type == "cold") |> 
  mutate(potass_per_cup = potass / cups) |> 
  group_by(manuf) |> 
  summarise(mean_potass_per_cup = mean(potass_per_cup))
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  filter(type == "cold") |> 
  mutate(potass_per_cup = potass / cups) |> 
  group_by(manuf) |> 
  summarise(mean_potass_per_cup = mean(potass_per_cup)) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## Save your changes!

When you manipulate your data, make sure you assign your new dataset to a variable.

```{r}
#| code-line-numbers: '1'
#| echo: true
#| eval: false
cereal_summary <- cereal |> 
  filter(type == "cold") |> 
  mutate(potass_per_cup = potas / cups) |> 
  group_by(manuf) |> 
  summarise(mean_potass_per_cup = mean(potass_per_cup))
```


## Code Formatting

Similar to the `+` formatting in `ggplot`, **do not** continue a line after writing a `|>`!

::: panel-tabset

### Bad Practice

```{r}
#| echo: true
#| eval: false
cereal |> group_by(type) |> summarise(mean_fiber = mean(fiber), num_cereals = n(), mean_sugar = mean(sugars))
```

### Good Practice
```{r}
#| echo: true
#| eval: false
cereal |> 
  group_by(type) |> 
  summarise(mean_fiber = mean(fiber), 
            num_cereals = n(),
            mean_sugar = mean(sugars))
```

:::

## Now you!

**In your group** implement the `dplyr` pipelines to address the three questions from the beginning of class:

1. What is the ratio of fiber to sugars in each cereal?

2. Create a new dataset that only has Nabisco cereals and displays the protein, fat, and sodium in each.

3. Create a table that shows, for each manufacturer the average and standard deviation of the grams of sugar in their cereals, along with how many cereals are in the data for each manufacturer. Order the table from most sugar (on average) to least.


## PA 3: Identify the Mystery College

Today you will use the `dplyr` package to clean some data and then use that cleaned data to figure out what college Margaret has been accepted to.

> Submit the full name of the college Margaret will attend to the Canvas Quiz.

![](https://events.calpoly.edu/sites/default/files/styles/width_2048px/public/2025-01/aerial-campus.png?itok=k7k7Dcev)

## To do...

+ **PA 3: Identify the Mystery College**
  + Due Thursday 4/17 before class
+ **Extra Data Ethics Reading**
  + [Data Feminism: The Numbers Donâ€™t Speak for Themselves](https://data-feminism.mitpress.mit.edu/pub/czq9dfs5/release/3)
  + Read before class on Thursday
+ **Lab 3: Teacher Evaluations**
  + Due Monday 4/21 at 11:59 pm

# Appendix - Base `R`

## How do we "filter" in base `R`?

You can use the `subset()` function!

```{r}
#| echo: true
#| eval: false
cereal |> 
  subset(name %in% c("Cheerios", "Cinnamon Toast Crunch", "Raisin Bran", "Cracklin' Oat Bran"))
```

```{r}
#| echo: false
#| eval: true
subset(cereal, name %in% c("Cheerios", "Cinnamon Toast Crunch", "Raisin Bran", "Cracklin' Oat Bran")) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

```{r}
#| echo: true
#| eval: false
cereal |> 
  subset(sugars < 5 & type == "hot")
```

```{r}
#| echo: false
#| eval: true
subset(cereal, sugars < 5 & type == "hot") |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## How do we "arrange" in base `R`?

You can use the `order()` function!

```{r}
#| echo: true
#| eval: false
cereal[order(cereal$sodium),]
```

```{r}
#| echo: false
#| eval: true
cereal[order(cereal$sodium),] |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

```{r}
#| echo: true
#| eval: false
cereal[order(cereal$sodium, cereal$sugars),]
```

```{r}
#| echo: false
#| eval: true
cereal[order(cereal$sodium, cereal$sugars),] |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## How do we "select" in base `R`?

You don't really use a specific function!

```{r}
#| echo: true
#| eval: false
cereal[,c("name", "manuf", "calories", "cups")]
```

```{r}
#| echo: false
#| eval: true
cereal[,c("name", "manuf", "calories", "cups")]|> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

```{r}
#| echo: true
#| eval: false
cereal |> 
  subset(select = -c(rating))
```

. . .

<br>

```{r}
#| echo: true
#| eval: false
colnames(cereal)[2:4] <- c("maker","temp","cals")
```

## How do we "mutate" in base `R`?

You can define new columns...

```{r}
#| echo: true
#| eval: false
cereal$potass_per_cup <- cereal$potass / cereal$cups
```

```{r}
#| echo: false
#| eval: true
tmp <- cereal
tmp$potass_per_cup <- tmp$potass / tmp$cups
tmp |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

...OR overwrite old ones!

```{r}
#| echo: true
#| eval: false
cereal$shelf <- as.factor(cereal$shelf)
```

## How do we "group" and "summarize" in base `R`?

You can use the `aggregate()` function.

```{r}
#| echo: true
#| eval: false
cereal |> 
  aggregate(sugars ~ manuf, FUN = mean)
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  aggregate(sugars ~ manuf, FUN = mean) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```

