---
title: "Data Cleaning & Manipulation"
format: 
  revealjs:
        theme: [default, ../slide_custom.scss]
        auto-stretch: true
editor: source
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
library(palmerpenguins)
library(knitr)
library(liver)

data(cereal)
data(diamonds)
```

## Thursday, April 17

Today we will...

-   New Material
    -   Extend `dplyr` verbs to have more functionality.
    -   Discuss data ethics.
-   Lab 3: Teacher Evaluations

# Extending `dplyr` verbs

## Reminder: Example Data [Cereal](https://search.r-project.org/CRAN/refmans/liver/html/cereal.html)

```{r}
#| echo: true
#| eval: false
library(liver)
data(cereal)
head(cereal, n = 5)
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  slice_head(n = 5) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "350px") |> 
  kableExtra::kable_styling(font_size = 24)
```

## More `dplyr`

-   We have already covered a lot, but not everything you might want...

-   Today we will cover functions that help with the following tasks:

    -   extract a variable as a vector
    -   simple frequency table of a categorical variable
    -   creating a categorical variable from levels of a quantitatie variable
    -   applying slice to groups and multiple variables
    -   mutating or summarizing many variables at once

## `pull()`

What is the mean potassium for cold cereals?

- You can't use the `$` operator in a pipeline
- `pull()` to the rescue!
- `pull()` extracts a data frame column as a *vector* 

. . .

```{r}
#| echo: true
cereal |> 
  filter(type == "cold") |> 
  pull(potass) |> 
  mean(na.rm = T)
```



## Reminder: count with `summarize()`

How many cereals does each `manuf` have in this dataset?

. . .

```{r}
#| echo: true
#| eval: false
cereal |> 
  group_by(manuf) |> 
  summarize(n = n())
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  group_by(manuf) |> 
  summarize(n = n()) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## Count with `count()`

How many cereals does each `manuf` have in this dataset?

. . .

```{r}
#| echo: true
#| eval: false
cereal |> 
  group_by(manuf) |> 
  count()
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  group_by(manuf) |> 
  count() |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## `if_else()`

For each cereal, label the `potass` as "high" or "low".

. . .

One `if-else` statement:

<font size = 6>

-   `if_else(<CONDITION>, <TRUE OUTPUT>, <FALSE OUTPUT>)`

</font>

. . .

```{r}
#| echo: true
#| eval: false
cereal |> 
  mutate(po_category = if_else(potass <= 100, "low", "high"),
         .after = potass)
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  mutate(po_category = if_else(potass <= 100, "low", "high"),
         .after = potass) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```

`.after` -- specifies the location of the newly created column

## `case_when()`

For each cereal, label the amount of sugar as "low", "medium", "high", or "very high".

. . .

A **series** of `if-else` statements.

```{r}
#| echo: true
#| eval: false
cereal |> 
  mutate(sugar_level = case_when(sugars == -1 ~ NA_character_,
                                 sugars < 2   ~ "low",
                                 sugars < 5   ~ "medium",
                                 sugars < 10  ~ "high",
                                 TRUE         ~ "very high")) |> 
  select(name, sugars, sugar_level)
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  mutate(sugar_level = case_when(sugars == -1 ~ NA_character_,
                                 sugars <= 2  ~ "low",
                                 sugars <= 5  ~ "medium",
                                 sugars <= 10 ~ "high",
                                 TRUE        ~ "very high")) |> 
  select(name, sugars, sugar_level) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## `group_by()` + `slice()`

For each `manuf`, find the cereal with the most `fiber`.

. . .

```{r}
#| echo: true
#| eval: false
cereal |> 
  group_by(manuf) |> 
  slice_max(order_by = fiber)
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  group_by(manuf) |> 
  slice_max(order_by = fiber) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## Multiple Variables in `slice()`

Find the **3** cereals with the highest `fiber` and `potass`.

. . .

-   If you are ordering by multiple variables, wrap them in a data.frame!

```{r}
#| echo: true
#| eval: false
cereal |> 
  slice_max(order_by = data.frame(fiber, potass),
            n = 3)
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  slice_max(order_by = data.frame(fiber, potass),
            n = 3) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## Summarize multiple columns

For each `type` of cereal, calculate the `mean` nutrient levels.

. . .

```{r}
#| echo: true
#| eval: false

cereal |> 
  group_by(type) |> 
  summarize(mean_calories = mean(calories, na.rm = T),
            mean_protein  = mean(protein, na.rm = T),
            mean_fat      = mean(fat, na.rm = T),
            mean_sodium   = mean(sodium, na.rm = T),
            . . .,
            mean_vitamins = mean(vitamins, na.rm = T))
```

. . .

:::callout-warning
# SO MUCH COPY-PASTE!

There are 9 different nutrient columns in the dataset! There has to be a better way...
:::



## Summarize multiple columns with `across()`

For each `type` of cereal, calculate the `mean` nutrient levels.

```{r}
#| echo: true
#| eval: false
cereal |> 
  group_by(type) |> 
  summarise(across(.cols = calories:potass, 
                   .fns = ~ mean(.x, na.rm = T)))
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  group_by(type) |> 
  summarise(across(.cols = calories:potass, .fns = mean)) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "130px") |> 
  kableExtra::kable_styling(font_size = 23)
```


:::callout-tip
# So much better!

:::


## Summarize multiple columns with `across()`

**Within** the `summarize()` function, we use the `across()` function, with three arguments:

-   `.cols` -- to specify the **columns** to apply functions to.
-   `.fns` -- to specify the **functions** to apply.
-   `.x` -- as a placeholder for the variables being passed into the function.

```{r}
#| echo: true
#| eval: false
cereal |> 
  group_by(type) |> 
  summarise(across(.cols = calories:potass, 
                   .fns = ~ mean(.x, na.rm = T)))
```


Use **lambda functions**: `~ <FUN_NAME>(.x, <ARGS>)`



## Summarize multiple columns with `across()`

-   To choose columns, you can use the same options as with `select()`

. . .

For each `type` of cereal, calculate the means of all numeric variables.

. . .

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "3"

cereal |> 
  group_by(type) |> 
  summarise(across(.cols = where(is.numeric),
                   .fns = ~ mean(.x, na.rm = T)))
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  group_by(type) |> 
  summarise(across(.cols = where(is.numeric),
                   .fns = ~ mean(.x, na.rm = T))) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "130px") |> 
  kableExtra::kable_styling(font_size = 23)
```

## If you are struggling with `across()`

:::incremental

Break it down:
  
  1. think about what the code would be for *one* column
      
```{r}
#| echo: true
#| eval: false

summarize(calories = mean(calories, na.rm = T))
```
  

  2. replace the column name with the placeholder `.x` and add a `~` in front for the `.fns` argument. You have created a lambda function!
    
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: '2'

summarize(across(.cols = ,
                 .fns  = ~mean(.x, na.rm = T)))
```
  
  3. think about **which** columns you want to apply this to for the `.cols` argument
    
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: '1'

summarize(across(.cols = calories:potass,
                 .fns  = ~mean(.x, na.rm = T)))
```

:::

## `across()`: Related Functions

These functions are used with `filter()` to select rows based on a logical statement applied to multiple columns

- `if_any()` -- returns a logical vector (one element for each row) that is `TRUE` if the logical statement is true for *any* column in the supplied columns
- `if_all()` -- returns a logical vector (one element for each row) that is `TRUE` if the logical statement is true for *all* columns in the supplied columns

## `if_any()` Example

```{r}
colleges <- read_csv("https://www.dropbox.com/s/bt5hvctdevhbq6j/colleges.csv?dl=1")

colleges_clean <- colleges |> 
    select(INSTNM, CITY, STABBR, ZIP,
         ADM_RATE, SAT_AVG, UGDS,
         TUITIONFEE_IN, TUITIONFEE_OUT,
         CONTROL, REGION) |> 
  filter(CONTROL == 1 | CONTROL == 2)
```

Remember, you got warnings in PA3 when converting some columns to numeric? If you look at the original data, you can see this is because missing values were indicated with the string `"NULL"`.

```{r}
colleges_clean |> 
  slice_head(n = 3) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "175px") |> 
  kableExtra::kable_styling(font_size = 20)
```
. . .

We could drop these rows before converting the columns to numeric if desired, using `if_any()`:

```{r}
#| echo: true

colleges_clean <- colleges_clean |> 
  filter(!if_any(.cols = ADM_RATE:TUITIONFEE_OUT, 
                 .fns = ~ .x == "NULL")) 
```

## Piping into `ggplot()`

Plot the `mean` `protein` per `cup` for each `manuf`.

. . .

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: '1-12'
#| fig-align: center
cereal |> 
  mutate(manuf = case_when(manuf == "A" ~ "American Home Food Products", 
                           manuf == "G" ~ "General Mills", 
                           manuf == "K" ~ "Kelloggs", 
                           manuf == "N" ~ "Nabisco", 
                           manuf == "P" ~ "Post", 
                           manuf == "Q" ~ "Quaker Oats", 
                           manuf == "R" ~ "Ralston Purina"))  |> 
  filter(type == "cold") |> 
  mutate(pro_per_cup = protein / cups) |> 
  group_by(manuf) |> 
  summarise(mean_pro_per_cup = mean(pro_per_cup)) |>  
  ggplot(aes(x = manuf, 
             y = mean_pro_per_cup)) +
  geom_point(size = 6) +
  labs(x = "Manufacturer",
       subtitle = "Mean Protein per Cup") +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.title.x  = element_text(size = 24),
        plot.subtitle = element_text(size = 24),
        axis.text = element_text(size = 20),
        axis.text.x = element_text(angle = 13)) +
  scale_y_continuous(limits = c(0,6))
```

## Piping into `ggplot()`

Plot the `mean` `protein` per `cup` for each `manuf`.

```{r}
#| output-location: slide
#| echo: true
#| code-line-numbers: '13-25'
#| fig-align: center
cereal |> 
  mutate(manuf = case_when(manuf == "A" ~ "American Home Food Products", 
                           manuf == "G" ~ "General Mills", 
                           manuf == "K" ~ "Kelloggs", 
                           manuf == "N" ~ "Nabisco", 
                           manuf == "P" ~ "Post", 
                           manuf == "Q" ~ "Quaker Oats", 
                           manuf == "R" ~ "Ralston Purina"))  |> 
  filter(type == "cold") |> 
  mutate(pro_per_cup = protein / cups) |> 
  group_by(manuf) |> 
  summarise(mean_pro_per_cup = mean(pro_per_cup)) |>  
  ggplot(aes(x = manuf, 
             y = mean_pro_per_cup)) +
  geom_point(size = 6) +
  labs(x = "Manufacturer",
       subtitle = "Mean Protein per Cup") +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.title.x  = element_text(size = 24),
        plot.subtitle = element_text(size = 24),
        axis.text = element_text(size = 20),
        axis.text.x = element_text(angle = 13)) +
  scale_y_continuous(limits = c(0,6))
```

## Putting it all Together - Let's Practice!

How would you make this plot from the `diamonds` dataset in `ggplot2`?

```{r}
#| code-fold: true
#| echo: true

diamonds |> 
  mutate(category = case_when(price < 1000 ~ "<$1k",
                              price <= 5000 ~ "$1k-$5k",
                              .default = ">$5k")) |>
  ggplot(mapping = aes(x = cut,
                       fill = cut)) +
  geom_bar() +
  facet_wrap(vars(category)) +
  labs(subtitle = "Number of Diamonds",
       x = "Cut",
       y = "",
       fill = "Cut") +
  theme(axis.text.x = element_blank(),
        axis.title = element_text(size = 14),
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 14),
        strip.text = element_text(size = 14),
        title = element_text(size = 14))
```

# Creating a Game Plan

## Creating a Game Plan

Just like when creating graphics with `ggplot`, wrangling data with `dplyr` involves thinking through many steps and writing many *layers* of code.

-   To help us think through a wrangling problem, we are going to create a game plan **before** we start writing code.

. . .

This might involve...

-   a sketch or flowchart.
-   a list of `dplyr` verbs and variable names.
-   annotating the `head` of the dataframe.

## Answering a Research Question

::: panel-tabset
### The Question

What is the `median` grams of `sugars` per `shelf` and the number of cereals per `shelf`, when we drop the missing values (coded as `sugars = -1`)?

<br>

**The person with the nearest birthday**: explain **out loud** to your neighbor how you would do this manipulation.

### The Code

```{r}
#| echo: true
cereal |> 
  select(sugars, shelf) |> 
  filter(sugars != -1) |> 
  group_by(shelf) |> 
  summarise(med_sugars = median(sugars),
            n_cereal = n())
```

### Formatting Code Output

Use `kable()` from the `knitr` package and the `kableExtra` package to format tables in Quarto.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: '7'
cereal |> 
  select(sugars, shelf) |> 
  filter(sugars != -1) |> 
  group_by(shelf) |> 
  summarise(med_sugars = median(sugars),
            n_cereal = n()) |> 
  kable()
```

```{r}
#| echo: false
#| eval: true

cereal |> 
  select(sugars, shelf) |> 
  filter(sugars != -1) |> 
  group_by(shelf) |> 
  summarise(med_sugars = median(sugars),
            n_cereal = n()) |> 
  kable() |> 
  kableExtra::scroll_box(height = "150px") |> 
  kableExtra::kable_styling(font_size = 30)
```

:::

# Thinking about Data Ethics

## Data Ethics

**1. What do we mean by *data ethics*?**

<br>

<br>

<br>

**2. Why do we (as statisticians, data scientists, folks working with data) need to think about *data ethics*?**

## Data Ethics

**1. What do we mean by *data ethics*?**

-   The process of evaluating data collection, processing, analysis, and dissemination practices for their adverse impacts on individuals, systems, and society.

**2. Why do we (as statisticians, data scientists, folks working with data) need to think about *data ethics*?**

-   We have a lot of power to declare **truth and fact**, hiding behind the *black box* of data science methods.

## Principles of Data Ethics

::: incremental
-   I will not be ashamed to say, **“I don't know”**
-   I will respect the **privacy** of my data subjects
-   I will remember that my data are not just numbers without meaning or context, but represent **real people and situations**
-   I will interrogate how my work may lead to unintended societal consequences or perpetuate inequity
:::

## ASA Ethical Guidelines

-   The [American Statistical Association’s Ethical Guidelines](https://www.amstat.org/your-career/ethical-guidelines-for-statistical-practice) for Statistical Practice are intended to help statistics practitioners make decisions ethically.
-   They aim to promote accountability by informing those who rely on statistics of the standards they should expect.

## The Numbers Don't Speak for Themselves

With the people next to you discuss:

- What was the main take-away for you?
- What points stood out to you?
- What was something that suprised you?
- Is there anything you didn't agree with?
- What questions do you have after reading?

## Additional Resources

-   [Data Feminism](https://data-feminism.mitpress.mit.edu)
-   Critical Quantitative Research
    -   [Resource 1](https://arxiv.org/pdf/2110.12871)
    -   [Resource 2](https://journals.sagepub.com/doi/10.1177/23328584241228223)

. . .

**I would love to discuss these with you in office hours!**

## Lab 3: Teacher Evaluations


![](https://cdn1.edgedatg.com/aws/v2/abc/AbbottElementary/showimages/be1f600a4c3c6db3e49e3b01891516c6/2016x807-Q75_be1f600a4c3c6db3e49e3b01891516c6.jpg)

## `dplyr` cheatsheet



![[ggplot2 cheatsheet](https://rstudio.github.io/cheatsheets/data-transformation.pdf)](https://rstudio.github.io/cheatsheets/pngs/data-transformation.png)

## Using `kable()` for formatting in labs

- When printing rows of a data frame or tibble
- need to load the `knitr` package at the beginning of your file
- `kable()` outputs a **markdown version** of your data
- should only be used to nicely format data you are **printing**

:::columns
:::column
**e.g.**
```{r}
#| echo: true
#| eval: false


cereal_clean <- cereal |> 
  mutate(ratio = sugars / potass)
  
cereal_clean |> 
  slice_head(n = 3) |> 
  kable()
```

:::
:::column

**NOT**

```{r}
#| echo: true
#| eval: false
cereal_clean <- cereal |> 
  mutate(ratio = sugars / potass) |> 
  slice_head(n = 3) |> 
  kable()
```

:::
:::

## To do...

-   **Lab 3: Teacher Evaluations**
    -   Due Monday, 4/21 at 11:59pm
-   **Read Chapter 4: Data Joins and Transformations**
    -   **Check-in 4.1 + 4.2** due Tuesday 4/22 before class
