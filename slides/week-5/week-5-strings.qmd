---
title: "Using `stringr` to Work with Strings"
format: 
  revealjs:
    theme: [default, ../slide_custom.scss]
editor: source
---

```{r}
#| include: false
#| message: false
#| label: setup

library(tidyverse)
library(liver)

data(cereal)
```

## Tuesday, April 29

Today we will...

+ Different schedule this week & next
+ New material
  + String variables
  + Functions for working with strings
  + Regular expressions
+ PA 5.1: Scrambled Message


:::callout-tip
## Follow along

Remember to download, save, and open up the [starter notes](../../student-versions/notes/w5-notes.qmd) for this week!
:::

## Week 5 Layout 

- Today: Strings with `stringr`
  + Practice Activity: Decoding a Message

. . .

- Thursday: Dates with `lubridate`
  + Practice Activity: Jewel Heist
  + Discuss midterm exam and project

. . .

- Lab Assignment Solving a Murder Mystery
  + Using `dplyr` + `stringr` + `ludridate`
  + Due (next) Monday
  + **May only use 1 late day so that I can post solutions before the exam**

## Week 6 Layout

- Tuesday: Version control with `git`
  + Practice Activity - done in groups **in class**
  + Last day to submit Lab 5
  
. . .

- Thursday: Midterm Exam

<!-- ## Comments from Week 4 -->

<!-- :::: {.columns}  -->
<!-- ::: {.column width="40%"}  -->

<!--  **Read**  -->

<!-- Average  -->

<!--  Total  -->

<!--  Which or For Each  -->

<!--  Minimum  -->

<!--  Maximum  -->

<!-- :::  -->
<!-- ::: {.column width="60%"}  -->

<!--  **Think**  -->

<!--  `summarize(avg = mean())`  -->

<!--  `summarize(total = sum())`  -->

<!--  `group_by()`  -->

<!--  `slice_min()`  -->

<!--  `slice_max()`  -->

<!-- :::  -->
<!-- :::: -->



# String Variables

## What is a string?

A **string** is a bunch of **characters**.

. . .

There is a difference between...

<center>

...a **string** (many characters, one object)...

and

...a **character vector** (vector of strings).

</center>

. . .

```{r}
#| echo: true
#| code-line-numbers: false
#| label: strings-example

my_string <- "Hi, my name is Bond!"
my_string
```

. . .

```{r}
#| echo: true
#| code-line-numbers: false
my_vector <- c("Hi", "my", "name", "is", "Bond")
my_vector
```

## `stringr`

:::: {.columns}
::: {.column width="80%"}
**Common tasks**

+ Identify strings containing a particular pattern.
+ Remove or replace a pattern.
+ Edit a string (e.g., make it lowercase).

:::
::: {.column width="20%"}

```{r}
#| fig-align: center
#| fig-alt: ""
knitr::include_graphics("https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png?raw=true")
```
:::
::::

::: callout-note 
+ The `stringr` package loads with `tidyverse`.
+ All functions are  of the form `str_xxx()`.
:::


## `pattern = `

The `pattern` **argument** appears in many `stringr` functions.

+ The pattern **must** be supplied inside quotes.

::: {.small}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

my_vector <- c("Hello,", 
               "my name is", 
               "Bond", 
               "James Bond")

str_detect(my_vector, pattern = "Bond")
str_locate(my_vector, pattern = "James Bond")
str_match(my_vector, pattern = "[bB]ond")
str_extract(my_vector, pattern = "[jJ]ames [bB]ond")

```
:::

<br>

. . .

Let's explore these functions!


## `str_detect()`

Returns a **logical vector** indicating whether the pattern was found in each element of the supplied vector.

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false
#| results: hold

my_vector <- c("Hello,", 
               "my name is", 
               "Bond", 
               "James Bond")
str_detect(my_vector, pattern = "Bond")
```
:::

. . .

::: {.small}
+ Pairs well with `filter()`.
+ Works with `summarise()` + `sum` (to get total matches) or `mean` (to get proportion of matches).
:::

. . .

::: {.small}
::: {.callout-note collapse="true"}
## Related Function

`str_which()` returns the indexes of the strings that contain a match.
:::
:::

## `str_match()` 

Returns a **character matrix** containing either `NA` or the pattern, depending on if the pattern was found.

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false
my_vector <- c("Hello,", 
               "my name is", 
               "Bond", 
               "James Bond")

str_match(my_vector, pattern = "Bond")
```
:::

<!-- . . . -->

<!-- The matrix will have more columns if you use regex groups. -->

<!-- ```{r} -->
<!-- #| echo: true -->
<!-- my_vector <- c("Hello,", "my name is", "Bond", "James Bond") -->
<!-- str_match(my_vector, pattern = "(.)o(.)") -->
<!-- ``` -->


## `str_extract()` 

Returns a **character vector** with either `NA` or the pattern, depending on if the pattern was found.

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

my_vector <- c("Hello,", 
               "my name is", 
               "Bond", 
               "James Bond")

str_extract(my_vector, pattern = "Bond")
```
:::

. . .

::: callout-warning

`str_extract()` only returns the **first** pattern match.

Use `str_extract_all()` to return **every** pattern match.

:::

## What do you mean by the *first* match?

Suppose we had a slightly different vector...

```{r}
#| echo: true
#| code-line-numbers: false

alt_vector <- c("Hello,", 
               "my name is", 
               "Bond, James Bond")
```

. . .

If we were to extract ***every*** instance of `"Bond"` from the vector...

::: columns
::: {.column width="45%"}
::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

str_extract(alt_vector, 
            pattern = "Bond")
```
:::
:::

::: {.column width="3%"}
:::

::: {.column width="52%"}
::: {.fragment}
::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

str_extract_all(alt_vector, 
                pattern = "Bond")
```
:::
:::
:::
:::


## `str_locate()` 

Returns a **dateframe** with two **numeric variables** -- the starting and ending location of the pattern. The values are `NA` if the pattern is not found.

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

my_vector <- c("Hello,", 
               "my name is", 
               "Bond", 
               "James Bond")

str_locate(my_vector, pattern = "Bond")
```
:::

. . .

::: {.small}
::: callout-note
## Related Function

`str_sub()` extracts values based on a starting and ending location.
:::
:::

## `str_subset()`

Returns a **character vector** containing a subset of the original **character vector** consisting of the elements where the pattern was found *anywhere in the element*.

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

my_vector <- c("Hello,", 
               "my name is", 
               "Bond", 
               "James Bond")

str_subset(my_vector, pattern = "Bond")
```
:::

## Try it out!

::: {.small}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

my_vector <- c("I scream,", 
               "you scream", 
               "we all",
               "scream",
               "for",
               "ice cream")

str_detect(my_vector, pattern = "cream")
str_locate(my_vector, pattern = "cream")
str_match(my_vector, pattern = "cream")
str_extract(my_vector, pattern = "cream")
str_subset(my_vector, pattern = "cream")
```

::: callout-note
For each of these functions, write down:

+ the **object structure** of the output.
+ the **data type** of the output.
+ a brief explanation of what they do.
::::
:::

## Replace / Remove Patterns

::: panel-tabset

### `str_replace()`

::: {.small}
Replace the **first** matched pattern in each string.

+ Pairs well with `mutate()`.

```{r}
#| echo: true
#| code-line-numbers: false

str_replace(my_vector, 
            pattern = "Bond", 
            replace = "Franco")
```
:::

</br> 

::: {.small}
::: {.callout-note collapse="true"}
## Related Function

`str_replace_all()` replaces **all** matched patterns in each string.
:::
:::

### `str_remove()`

::: {.small}
Remove the **first** matched pattern in each string.

```{r}
#| echo: true
#| code-line-numbers: false

str_remove(my_vector, 
           pattern = "Bond")
```
:::

</br>

::: {.small}
::: {.callout-note collapse="true"}
## Related Functions

This is a special case of  `str_replace(x, pattern, replacement = "")`.

`str_remove_all()` removes **all** matched patterns in each string.
:::
:::
:::


## Edit Strings

Convert letters in a string to a specific capitalization format.

::: panel-tabset

### lower

`str_to_lower()` converts all letters in a string to lowercase.

<br>

```{r}
#| echo: true
#| code-line-numbers: false

str_to_lower(my_vector)
```

### UPPER

`str_to_upper()` converts all letters in a string to uppercase.

<br>

```{r}
#| echo: true
#| code-line-numbers: false

str_to_upper(my_vector)
```

### Title

`str_to_title()` converts the first letter of each word to uppercase.

<br>

```{r}
#| echo: true
#| code-line-numbers: false

str_to_title(my_vector)
```

::: {.callout-tip}
# This is handy for axis labels!
:::
:::


## Combine Strings

::: panel-tabset
### `str_c()`

Join multiple strings into a single character vector.

```{r}
#| echo: true
#| code-line-numbers: false

prompt <- "Hello, my name is"
first  <- "James"
last   <- "Bond"
str_c(prompt, last, ",", first, last, sep = " ")
```

::: callout-note
Similar to `paste()` and `paste0()`.
:::

### `str_flatten()`

Combine a vector of strings into a single string.

```{r}
#| echo: true
#| code-line-numbers: false

my_vector <- c("Hello,", 
               "my name is", 
               "Bond", 
               "James Bond")

str_flatten(my_vector, collapse = " ")
```

### `str_glue()`

Use variables in the environment to create a string based on {expressions}.

```{r}
#| echo: true
#| code-line-numbers: false

first <- "James"
last <- "Bond"
str_glue("My name is {last}, {first} {last}")
```

::: callout-tip
For more details, I would recommend looking up the [`glue` R package](https://glue.tidyverse.org/)!
:::
:::

## Tips for String Success

+ Refer to the [`stringr` cheatsheet](https://posit.co/wp-content/uploads/2022/10/strings-1.pdf)

+ Remember that `str_xxx` functions need the first argument to be a **vector of strings**, not a **dataset**!
  + You will use these functions *inside* `dplyr` verbs like `filter()` or `mutate()`.

```{r}
#| echo: true
#| code-line-numbers: "2"
#| eval: false
cereal |> 
  mutate(is_bran = str_detect(name, "Bran"), 
         .after = name)
```


```{r}
#| eval: true
#| echo: false

cereal |> 
  mutate(is_bran = str_detect(name, "Bran"), 
         .after = name) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## Tips for String Success

The real power of these `str_xxx` functions comes when you specify the `pattern` using **regular expressions**!

```{r}
#| fig-align: center
#| out-width: 70%
#| fig-alt: "The image is a comic strip from xkcd titled 'Regular Expressions.' It humorously portrays a programmer's overconfidence in using regular expressions to solve complex text processing tasks. In the first panel, a stick figure declares, 'EVERYBODY STAND BACK,' and in the second panel, they assert, 'I KNOW REGULAR EXPRESSIONS,' suggesting that their expertise is both a warning and a badge of honor. This reflects the sentiment that while regular expressions are powerful tools in programming, they can also lead to intricate and hard-to-maintain code if not used judiciously."

knitr::include_graphics("images/regular_expressions.png")
```


# regex

## Regular Expressions

> "Regexps are a very terse language that allow you to describe patterns in strings."
>
> *R for Data Science*

. . .

Use `str_xxx` functions + **regular expressions**!

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2"
str_detect(string  = my_string_vector,
           pattern = "p[ei]ck[a-z]")
```

. . .

::: callout-tip
You might encounter `gsub()`, `grep()`, etc. from Base R, but I would highly recommending using functions from the `stringr` package instead.
:::

## Regular Expressions

**...are tricky!**

+ There are lots of new symbols to keep straight.
+ There are a lot of cases to think through.

<br>

This [web app](https://spannbaueradam.shinyapps.io/r_regex_tester/) for testing R regular expressions might be handy!


## Special Characters

There is a set of characters that have a specific meaning when using regex.

+ The `stringr` package **does not** read these as normal characters.
+ These characters are:

<center>

`.` `^`  `$` `\`  `|` `*` `+` `?` `{` `}` `[` `]` `(` `)`

</center>


## Wild Card Character: `.`

This character can match **any** character.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("She", 
       "sells", 
       "seashells", 
       "by", 
       "the", 
       "seashore!")

str_subset(x, pattern = ".ells")
```

. . .

<br>

```{r}
#| echo:  true
str_extract(x, pattern = ".ells")
```

<br>

This matches strings that contain any character followed by "ells".


## Anchor Characters: `^ $`

::: columns
::: {.column width="48%"}
::: {.small}
`^` -- looks at the beginning of a string.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("She", 
       "sells", 
       "seashells", 
       "by", 
       "the", 
       "seashore!")

str_subset(x, pattern = "^s")
```

This matches strings that start with "s".
:::

:::

::: {.column width="2%"}
:::

::: {.column width="50%"}
::: {.fragment}
::: {.small}
`$` -- looks at the end of a string.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("She", 
       "sells", 
       "seashells", 
       "by", 
       "the", 
       "seashore!")

str_subset(x, pattern = "s$")
```

This matches strings that end with "s".
:::

:::
:::
:::


## Quantifier Characters: `? + *`

::: {.small}
`?`  -- matches when the preceding character occurs 0 or 1 times in a row.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("shes", 
       "shels", 
       "shells", 
       "shellls", 
       "shelllls")

str_subset(x, pattern = "shel?s")
```
:::

. . .

::: {.small}
`+` -- occurs 1 or more times in a row.

```{r}
#| echo: true
#| code-line-numbers: false

str_subset(x, pattern = "shel+s")
```
:::

. . .

::: {.small}
`*` -- occurs 0 or more times in a row.

```{r}
#| echo: true
#| code-line-numbers: false

str_subset(x, pattern = "shel*s")
```
:::

## Quantifier Characters: `{}`

::: {.small}
`{n}` -- matches when the preceding character occurs exactly n times in a row.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("shes", 
       "shels", 
       "shells", 
       "shellls", 
       "shelllls")

str_subset(x, pattern = "shel{2}s")
```
:::

. . .

::: {.small}
`{n,}` -- occurs at least n times in a row.

```{r}
#| echo: true
str_subset(x, pattern = "shel{2,}s")
```
:::

. . .

::: {.small}
`{n,m}` -- occurs between n and m times in a row.

```{r}
#| echo: true
#| code-line-numbers: false

str_subset(x, pattern = "shel{1,3}s")
```
:::


## Character Classes: `[]`

::: {.small}
Character classes let you specify multiple possible characters to match on.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("Peter", 
       "Piper", 
       "picked", 
       "a",
       "peck",
       "of",
       "pickled",
       "peppers!")

str_subset(x, pattern = "p[ei]ck")
```
:::



## Matches you don't want

`[^ ]`  -- specifies characters **not** to match on (think **except**)

```{r}
#| echo: true
#| code-line-numbers: false

str_subset(x, pattern = "p[^i]ck")
```

. . .

</br>

But remember that `^` outside of brackets specifies the first charatcter in a string.

```{r}
#| echo: true
#| code-line-numbers: false

str_subset(x, pattern = "^p")
```

. . .

</br> 

```{r}
#| echo: true
#| code-line-numbers: false

str_subset(x, pattern = "^[^p]")
```

. . .

::: callout-warning
Why do "Peter" and "Piper" not match `"^[^p]"`?

Capitilization matters!
:::



## Character Classes: `[]`

::: {.small}
`[ - ]`  -- specifies a range of characters.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("Peter", 
       "Piper", 
       "picked", 
       "a",
       "peck",
       "of",
       "pickled",
       "peppers!")

str_subset(x, pattern = "p[ei]ck[a-z]")
```
:::

. . .

::: {.small}
+ [A-Z] matches any capital letter.
+ [a-z] matches any lowercase letter.
+ [A-z] or [:alpha:] matches any letter
+ [0-9] or [:digit:] matches any number
:::

## Shortcuts

::: {.small}
- `\\w` -- matches any **"word"**  (`\\W` matches **not** "word") 

  + A "word" contains any letters and numbers.

- `\\d` -- matches any **digit** (`\\D` matches **not** digit) 

- `\\s` -- matches any **whitespace** (`\\S` matches **not** whitespace) 

  + Whitespace includes spaces, tabs, newlines, etc.
:::

. . .

</br> 

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

x <- "phone number: 1234567899"

str_extract(x, pattern = "\\d+")
str_extract_all(x, pattern = "\\S+")
```
:::


## Character Groups: `()`

::: {.small}
Groups are created with `( )`.

+ We can specify "either" / "or" within a group using `|`.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("Peter", 
       "Piper", 
       "picked", 
       "a", 
       "peck",
       "of", 
       "pickled",
       "peppers!")

str_subset(x, pattern = "p(e|i)ck")
```
:::

<br>

::: {.small}
This matches strings that contain **either** "peck"
 **or** "pick".
:::

## Character Groups: `()`

+ We can then reference groups in order with escaped numbers (`\\1`) to specify that certain groupings repeat.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("hannah", 
       "had", 
       "a", 
       "ball", 
       "on",
       "a", 
       "race car")

str_subset(x, pattern = "^(.).*\\1$")
```


<br>

::: {.small}
This matches strings that start and end with the same character.
:::

## Character Groups: `()`

- Groups also let us be very precise with extracting strings!

```{r}
#| echo: true
shopping_list <- c("apples x4", 
                   "bag of flour", 
                   "bag of sugar", 
                   "milk x2")

str_extract(shopping_list, "([a-z]+) x([1-9])")
```

. . .

</br>

```{r}
#| echo: true
str_extract(shopping_list, "([a-z]+) x([1-9])", group = 1)
```
</br>

```{r}
#| echo: true
str_extract(shopping_list, "([a-z]+) x([1-9])", group = 2)
```


## Try it out!

What regular expressions would match words that...

::: columns
::: {.column width="40%"}
+ end with a vowel?
+ start with x, y, or z?
+ contains at least one digit?
+ contains two of the same letters in a row?
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
```{r}
#| echo: true
#| code-line-numbers: false

x <- c("zebra", 
       "xray", 
       "apple", 
       "yellow",
       "color", 
       "patt3rn",
       "g2g",
       "summarise")
```
:::
:::

## Some Possible Solutions...

+ end with a vowel?

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

str_subset(x, "[aeiouy]$")
```

+ start with x, y, or z?

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

str_subset(x, "^[xyz]")
```

+ contain at least one digit?

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

str_subset(x, "[:digit:]")
```

+ contains two of the same letters in a row

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

str_subset(x, "([:alpha:])\\1")
```




## Escape: `\\`

::: {.small}
To match a *special character*, you need to **escape** it.

```{r}
#| echo: true
#| error: true
#| code-line-numbers: false

x <- c("How",
       "much", 
       "wood",
       "could",
       "a",
       "woodchuck",
       "chuck",
       "if",
       "a",
       "woodchuck",
       "could",
       "chuck",
       "wood?")

str_subset(x, pattern = "?")
```
:::

## Escape: `\\`

Use `\\` to escape the `?` -- it is now read as a normal character.

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: false

str_subset(x, pattern = "\\?")
```

. . .

</br>

::: callout-note
Alternatively, you could use `[]`:

```{r}
#| echo: true
#| code-line-numbers: false

str_subset(x, pattern = "[?]")
```
:::

## When in Doubt

<br>

```{r}
#| fig-align: center
#| out-width: 80%
knitr::include_graphics("images/backslashes.png")
```

Use the [web app](https://spannbaueradam.shinyapps.io/r_regex_tester/) to test R regular expressions.

## Tips for working with regex

+ Read the regular expressions out loud like a request.

. . .

+ Test out your expressions on small examples first.

::: {.callout-note collapse="true"}  
### `str_view()`
```{r}
#| echo: true
#| code-line-numbers: false

str_view(c("shes", "shels", "shells", "shellls", "shelllls"), "l+")
```
:::

. . .

+ Use the `stringr` [cheatsheet](https://posit.co/wp-content/uploads/2022/10/strings-1.pdf).

. . .

+ Be kind to yourself! 


<!-- # Strings in the `tidyverse` -->

<!-- ## `stringr` functions + `dplyr` verbs! -->


<!-- ```{r} -->
<!-- #| include: false -->
<!-- library(readxl) -->
<!-- military <- read_xlsx(here::here("group-activities",  -->
<!--                                  "week-4",  -->
<!--                                  "data", -->
<!--                                  "gov_spending_per_capita.xlsx"), -->
<!--                       sheet = "Share of Govt. spending",  -->
<!--                       skip  = 7,  -->
<!--                       n_max  = 191) -->
<!-- ``` -->

<!-- Country names with a (capital or lowercase) "Z"? -->

<!-- ```{r} -->
<!-- #| echo: true -->
<!-- #| eval: false -->
<!-- #| code-line-numbers: "2" -->
<!-- military |>  -->
<!--   filter(str_detect(Country, "[Zz]")) |>  -->
<!--   distinct(Country) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- #| eval: true -->
<!-- #| echo: false -->
<!-- military |>  -->
<!--   filter(str_detect(Country, "[Zz]")) |>  -->
<!--   distinct(Country) |>  -->
<!--   knitr::kable() |>  -->
<!--   kableExtra::scroll_box(height = "125px") |>  -->
<!--   kableExtra::kable_styling(font_size = 25) -->
<!-- ``` -->

<!-- . . . -->

<!-- The proportion of country names with a compass direction? -->

<!-- ```{r} -->
<!-- #| echo: true -->
<!-- #| code-line-numbers: "3-4" -->
<!-- military |>  -->
<!--   distinct(Country) |>  -->
<!--   summarize(prop = mean(str_detect(Country, -->
<!--                                    pattern = "[Nn]orth|[Ss]outh|[Ee]ast|[Ww]est"))) -->
<!-- ``` -->


<!-- ## `matches(pattern)` -->

<!-- Select all variables with a name that matches the supplied pattern. -->

<!-- + Pairs well with `select()`, `rename_with()`, and `across()`. -->

<!-- ::: panel-tabset -->

<!-- ### Before -->
<!-- ```{r} -->
<!-- #| echo: true -->
<!-- military_clean <- military |>  -->
<!--   mutate(across(`1988`:`2019`,  -->
<!--                 ~ na_if(.x, y = ". .")), -->
<!--          across(`1988`:`2019`,  -->
<!--                 ~ na_if(.x, y = "xxx"))) -->
<!-- ``` -->

<!-- ### With regex -->
<!-- ```{r} -->
<!-- #| echo: true -->
<!-- military_clean <- military |>  -->
<!--   mutate(across(matches("[1-9]{4}"),  -->
<!--                 ~ na_if(.x, y = ". .")), -->
<!--          across(matches("[1-9]{4}"),  -->
<!--                 ~ na_if(.x, y = "xxx"))) -->
<!-- ``` -->

<!-- ::: -->

<!-- ## Messy Covid Variants! -->

<!-- ![](images/covid-data-snip.JPG) -->

<!-- What is that variable?! -->

<!-- <font size = 4> -->

<!-- `[{'variant': 'Other', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 4.59}, {'variant': 'V-20DEC-01 (Alpha)', 'cumWeeklySequenced': 0.0, 'newWeeklyPercentage': 0.0}, {'variant': 'V-21APR-02 (Delta B.1.617.2)', 'cumWeeklySequenced': 0.0, 'newWeeklyPercentage': 0.0}, {'variant': 'V-21OCT-01 (Delta AY 4.2)', 'cumWeeklySequenced': 0.0, 'newWeeklyPercentage': 0.0}, {'variant': 'V-22DEC-01 (Omicron CH.1.1)', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 24.56}, {'variant': 'V-22JUL-01 (Omicron BA.2.75)', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 8.93}, {'variant': 'V-22OCT-01 (Omicron BQ.1)', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 49.57}, {'variant': 'VOC-21NOV-01 (Omicron BA.1)', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 0.02}, {'variant': 'VOC-22APR-03 (Omicron BA.4)', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 0.08}, {'variant': 'VOC-22APR-04 (Omicron BA.5)', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 5.59}, {'variant': 'VOC-22JAN-01 (Omicron BA.2)', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 1.41}, {'variant': 'unclassified_variant', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 5.26}]` -->

<!-- </font> -->

## More practice!

```{r}
county_pop <- data.frame(county = c("STORY", "BOONE", "MARSHALL", "POLK"),
                         pop = c(100000, 40000, 120000, 500000))

county_loc <- data.frame(county = c("Story", "Boone", "Marshall", "Polk"),
                         region = c("Central", "Central", "East", "Central"))
```


I want to join two datasets that have a `county` variable:

::: columns
::: {.column width="50%"}


```{r}
#| echo: true
#| eval: false
county_pop
```

```{r}
#| echo: false
county_pop |> 
  knitr::kable()
```

:::

::: {.column width="50%"}


```{r}
#| echo: true
#| eval: false
county_loc
```

```{r}
#| echo: false
county_loc |> 
  knitr::kable()
```

:::
:::

. . .

:::callout-note
# Practice

What `stringr` function will help me join the `county_pop` and `county_loc` by `county`?
:::

## More practice!


What if I want to pull out only the area code in a phone number?

```{r}
#| echo: true
phone_numbers <- c("(515)242-1958", "(507)598-1395", "(805)938-7639")
```

:::callout-note
# Practice

You will need a `stringr` function and to use regular expressions!
:::

. . .

```{r}
#| echo: true
str_extract(phone_numbers, "\\(\\d{3}\\)")
```

. . .

What if I want *just* the numbers in the area code?

. . .
```{r}
#| echo: true
str_extract(phone_numbers, "\\((\\d{3})\\)", group = 1)
```

```{r}
#| echo: true
phone_numbers |> 
  str_extract(pattern = "\\(\\d{3}\\)") |> 
  str_remove_all(pattern = "[:punct:]")
```

## More practice! (last one)

```{r}
#| echo: false
awards_dat <- data.frame(awards = c("Beyonce: 35G,  0A, 0E",
                                    "Kendrick Lamar: 22G, 0A, 1E",
                                    "Charli XCX: 2G, 0A, 0E",
                                    "Cynthia Erivo: 1G, 0A, 1E",
                                    "Viola Davis: 1G, 1A, 1E",
                                    "Elton John: 6G, 2A, 1E"))
```
::: columns
::: {.column width="50%"}


```{r}
#| echo: true
#| eval: false
awards_dat
```

```{r}
#| echo: false
awards_dat |> 
  knitr::kable() |> 
  kableExtra::scroll_box() |> 
  kableExtra::kable_styling(font_size = 30)
```

::: callout-note
# That's annoying...

Create a variable with just the artist name and a variable with the number of Grammys won.
:::

:::
::: {.column width="50%"}


:::
:::

## More practice! (last one)

::: columns
::: {.column width="50%"}


```{r}
#| echo: true
#| eval: false
awards_dat
```

```{r}
#| echo: false
awards_dat |> 
  knitr::kable() |> 
  kableExtra::scroll_box() |> 
  kableExtra::kable_styling(font_size = 30)
```

::: callout-note
# That's annoying...

Create a variable with just the artist name and a variable with the number of Grammys won.
:::

:::
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false

awards_dat |> 
  mutate(artist = str_extract(awards, "[A-z\\s]+"),
         grammies = str_extract(awards, "([1-9]+)G", 
                                group = 1)) |> 
  select(artist, grammies)
```

```{r}
#| echo: false
#| eval: true

awards_dat |> 
  mutate(artist = str_extract(awards, "([[:alpha:]\\s]+)\\:", 
                              group = 1),
         grammies = str_extract(awards, "([1-9]+)G", 
                                group = 1)) |> 
  select(artist, grammies) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```

:::
:::

# PA 5.1: Scrambled Message

::: columns
::: {.column width="40%"}
In this activity, you will use functions from the `stringr` package and regex to decode a message.
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
![](images/scrabble-tiles.jpg){fig-alt="A pile of tiles from the game of Scrabble."}
:::
:::



## To do...

+ **PA 5.1: Scrambled Message**
  + Due Thursday before class
+ **LA 5: Murder in SQL City**
  + Due Monday at 11:59 pm
  + You can use maximum 1 late day on this lab!
+ Look out for exam information posted on Canvas - we will discuss on Thursday
