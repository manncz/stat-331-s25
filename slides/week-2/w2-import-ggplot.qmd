---
title: "Importing Data and Graphics with `ggplot2`"
format: 
  revealjs:
    theme: [default, ../slide_custom.scss]
editor: source
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
```

## Tuesday, April 8

Today we will...

-   Style Note of the Day
-   New Material
    -   Welcome to the Tidyverse
    -   Load External Data
    -   Graphics (and `ggplot2`)
    -   Game Planning
-   PA 2: Using Data Visualization to Find the Penguins


## Style Note of the Day - [Function Calls](https://style.tidyverse.org/syntax.html#argument-names)

:::callout-tip
**Name** arguments in function calls

Only include **necessary** arguments! (If you are using any default values, no need to repeat them in your function call.)
:::

**Good**
```{r}
#| echo: true
#| eval: false
mean(1:10, na.rm = TRUE)
seq(from = 1, to = 100, by = 5)
```

. . .

**Bad**
```{r}
#| echo: true
#| eval: false
mean(1:10, , TRUE)
mean(1:10, trim = 0, na.rm = TRUE)

seq(1, 100, 5)
```

# Welcome to the Tidyverse

## Tidywho?

::: columns
::: {.column width="70%"}
>The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.[^1]
:::

::: {.column width="30%"}
![](images/tidyverse_hex.png)
:::
:::


. . .


- Most of the functionality you will need for an entire data analysis workflow with **cohesive grammar**

[^1]: https://www.tidyverse.org/


## Core Packages

**The tidyverse includes functions to:**

|                                 |           |
|---------------------------------|-----------|
| Read in data                    |`readr`    |
| Visualize data                  |`ggplot2` |
| Manipulate rectangular data     |`tidyr`, `dplyr`, `tibble` |
| Handle special variable types   |`stringr`, `forcats` , `lubridate` |
| Support functional programming  |`purrr` |

## Tidyverse and STAT 331

::: {.incremental}
- This version of the course will primarily use tidyverse packages and grammar

- Reasoning:
    + the tidyverse is as reputable and ubiquitous as base `R` at this point (in my opinion)
    + the tidyverse is specifically designed to help programmers produce easy-to-read and reproducible analyses and to reduce errors
    + there is excellent [documentation](https://www.tidyverse.org/packages/)!
    + I like it!
    
:::



## Using the `tidyverse` package

- Installing/loading the `tidyverse` package installs/loads **all** of the "tidyverse" packages

- Avoid redundantly installing or loading packages!

. . .

Do this:

```{r}
#| echo: true
#| eval: false
library(tidyverse)
```
or 
```{r}
#| echo: true
#| eval: false
library(readr)
```

. . .

Not this:

```{r}
#| echo: true
#| eval: false
library(tidyverse)
library(readr)
```


## Tidy Data

![Artwork by Allison Horst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/85520b8f-4629-4763-8a2a-9ceff27458bf_rw_1920.jpg?h=21007b20ac00cf37318dca645c215453)

# Working with External Data

## Data Science Workflow

![](images/data-science-workflow.png)

## Common Types of Data Files

Look at the **file extension** for the type of data file.

. . .

::: columns
::: {.column width="70%"}
`.csv` : "comma-separated values"
:::

::: {.column width="30%"}
```         
Name, Age
Bob, 49
Joe, 40
```
:::
:::

. . .

`.xls, .xlsx`: Microsoft Excel spreadsheet

-   Common approach: save as `.csv`
-   Nicer approach: use the `readxl` package

. . .

`.txt`: plain text

-   Could have any sort of delimiter...
-   Need to let R know what to look for!

## Common Types of Data Files

::: panel-tabset
### File A

![](images/csv_file.png)

### File B

![](images/tsv_file.png)

### File C

![](images/pipe_file.png)

### Sources

-   [File A](https://people.sc.fsu.edu/~jburkardt/data/csv/csv.html)
-   [File B](https://github.com/ccusa/Disaster_Vulnerability_Map/blob/master/sample-data.tsv)
-   [File C](https://chadbaldwin.net/2021/03/24/quick-parse-csv-file.html)
:::

## Loading External Data

Using **base** `R` functions:

-   `read.csv()` is for reading in `.csv` files.

-   `read.table()` and `read.delim()` are for any data with "columns" (you specify the separator).

## Loading External Data

The **tidyverse** has some cleaned-up versions in the `readr` and `readxl` packages:

-   `read_csv()` is for comma-separated data.

-   `read_tsv()` is for tab-separated data.

-   `read_table()` is for white-space-separated data.

-   `read_delim()` is any data with "columns" (you specify the separator). The above are special cases.

-   `read_excel()` is specifically for dealing with Excel files.

Remember to load the `readr` and `readxl` packages first!

## Take a look at the documentation

<center>

![](images/read.csv_doc.png)

![](images/read_csv_doc.png)

</center>


## Reminder: Notebooks and File Paths

- You have to tell `R` where to "find" the data you want to read in using a file path.

- Quarto automatically sets the working directory to the be directory where the Quarto document is for any code **within** the Quarto document

- This overrides the directory set by an .Rproj

. . .

::: columns
::: {.column width="70%"}
- Pay attention to this when setting relative filepaths

    + To "backout" of one directory, use `"../"`
    + e.g.: `"../data/dat.csv"`
:::
::: {.column width="30%"}  
![](images/folder_structure.png)
:::
:::


# Grammar of Graphics

## Why Do We Create Graphics?

## Grammar of Graphics

The Grammar of Graphics (GoG) is a principled way of specifying **exactly** how to create a particular graph from a given data set. It helps us to systematically design new graphs.

. . .

<br>

Think of a graph or a data visualization as a mapping...

- **FROM variables** in the data set (or statistics computed from the data)...

- **TO visual attributes** (or "aesthetics") **of marks** (or "geometric elements") on the page/screen.

## Why Grammar of Graphics?

-   It's more flexible than a "chart zoo" of named graphs.
-   The software understands the structure of your graph.
-   It easily automates graphing of data subsets.

## Components of Grammar of Graphics

-   `data`: dataframe containing variables
-   `aes` : aesthetic mappings (position, color, symbol, ...)
-   `geom` : geometric element (point, line, bar, box, ...)
-   `stat` : statistical variable transformation (identity, count, linear model, quantile, ...)
-   `scale` : scale transformation (log scale, color mapping, axes tick breaks, ...)
-   `coord` : Cartesian, polar, map projection, ...
-   `facet` : divide into subplots using a categorical variable

# Using `ggplot2`

## How to Build a Graphic

Complete this template to build a basic graphic:

<br>

![](images/basic_ggplot.png)

-   We use `+` to add **layers** to a graphic.

## 

::: panel-tabset
### Add data

This begins a plot that you can add layers to:

```{r}
#| echo: true
#| code-line-numbers: "1"
#| fig-align: center
#| fig-height: 4.5
#| fig-width: 4.5
ggplot(data = mpg)
```

### Add aesthetics

```{r}
#| echo: true
#| code-line-numbers: "2"
#| fig-align: center
#| fig-height: 4.5
#| fig-width: 4.5
ggplot(data = mpg, 
       aes(x = class, y = hwy))
```

### Add one `geom` per layer

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| code-line-numbers: "4"
#| fig-height: 6
ggplot(data = mpg, 
       aes(x = class, y = hwy)) +
  geom_jitter()
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| code-line-numbers: "5"
#| fig-height: 6
ggplot(data = mpg, 
       aes(x = class, y = hwy)) +
  geom_jitter() +
  geom_boxplot()
```
:::

How would you make the points be **on top** of the boxplots?
:::
:::

## Aesthetics

We map **variables** (columns) from the data to **aesthetics** on the graphic useing the `aes()` function.

. . .

What aesthetics can we set (*see [ggplot2 cheat sheet](https://github.com/rstudio/cheatsheets/blob/main/data-visualization-2.1.pdf) for more*)?

::: columns
::: {.column width="22%"}
<font size = "6">

-   x, y
-   color, fill
-   linetype
-   lineend
-   size
-   shape

</font>
:::

::: {.column width="78%"}
:::
:::

## Aesthetics

We map **variables** (columns) from the data to **aesthetics** on the graphic useing the `aes()` function.

What aesthetics can we set (*see [ggplot2 cheat sheet](https://github.com/rstudio/cheatsheets/blob/main/data-visualization-2.1.pdf) for more*)?

::: columns
::: {.column width="20%"}
<font size = "6">

-   x, y
-   color, fill
-   linetype
-   lineend
-   size
-   shape

</font>
:::

::: {.column width="80%"}
![](images/aes.png)
:::
:::

## Global v. Local Aesthetics


**Global Aesthetics**

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "2-3"
ggplot(data = mpg, 
       mapping = aes(x = class, 
                     y = hwy)) +
  geom_boxplot()
```

. . .

**Local Aesthetics**

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "2-3"
ggplot(data = mpg) +
  geom_boxplot(mapping = aes(x = class, 
                             y = hwy))
```

## Mapping v. Setting Aesthetics

**Mapping Aesthetics**

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "4"
ggplot(data = mpg) +
  geom_jitter(mapping = aes(x = class, 
                             y = hwy,
                             color = class))
```

. . .

**Setting Aesthetics**

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "4"
ggplot(data = mpg) +
  geom_jitter(mapping = aes(x = class, 
                             y = hwy),
               color = "steelblue")
```


## Geometric Objects

We use a `geom_xxx()` function to represent data points.

. . .

::: columns
<font size = "6">

::: {.column width="35%"}
**one variable**

-   `geom_density()`
-   `geom_dotplot()`
-   `geom_histogram()`
-   `geom_boxplot()`
:::

::: {.column width="35%"}
**two variable**

-   `geom_point()`
-   `geom_line()`
-   `geom_density_2d()`
:::

::: {.column width="30%"}
**three variable**

-   `geom_contour()`
-   `geom_raster()`
:::
:::

</font>

*Not an exhaustive list -- see [ggplot2 cheat sheet](https://github.com/rstudio/cheatsheets/blob/main/data-visualization-2.1.pdf)*.

## 

::: panel-tabset
### geom_point()

```{r}
#| echo: true
#| code-fold: true
#| code-line-numbers: "5"
#| fig-height: 5
#| fig-width: 7
#| fig-align: center
ggplot(data = mpg,
       aes(x = cty,
           y = hwy,
           color = class)) +
  geom_point() +
  labs(x = "City (mpg)", y = "Highway (mpg)") +
  theme(axis.title = element_text(size = 14),
        legend.title = element_blank(),
        legend.text = element_text(size = 14))
```

### geom_text()

```{r}
#| echo: true
#| code-fold: true
#| code-line-numbers: "5"
#| fig-height: 5
#| fig-width: 7
#| fig-align: center
ggplot(data = mpg,
       aes(x = cty,
           y = hwy,
           color = class)) +
  geom_text(aes(label = class)) +
  labs(x = "City (mpg)", y = "Highway (mpg)") +
  theme(axis.title = element_text(size = 14),
        legend.title = element_blank(),
        legend.text = element_text(size = 14))
```

### geom_line()

```{r}
#| echo: true
#| code-fold: true
#| code-line-numbers: "5"
#| fig-height: 5
#| fig-width: 7
#| fig-align: center
ggplot(data = mpg,
       aes(x = cty,
           y = hwy,
           color = class)) +
  geom_line() +
  labs(x = "City (mpg)", y = "Highway (mpg)") +
  theme(axis.title = element_text(size = 14),
        legend.title = element_blank(),
        legend.text = element_text(size = 14))
```
:::

## Creating a Graphic

To create a specific type of graphic, we will **combine** aesthetics and geometric objects.

. . .

<br>

Let's try it!


## Game Planning

**What**: [Game Plans!](https://manncz.github.io/stat331-calpoly-text/02-tidy-data-and-basics-of-graphics.html#exploratory-data-analysis-with-the-grammar-of-graphics) are strategic guides that prompt you to map your coding strategies before implementation.

**How**: Your favorite sketch app, paper + pencil, online whiteboard ([Excalidraw!](https://excalidraw.com/)).

**Why**: Tool to connect data and desired graphic before you start coding

## 

::: panel-tabset
### The Goal

Start with the TX housing data.

![](images/tx_housing.png)

Make a plot of [ median house price ]{style="color:teal"} over [ time ]{style="color:purple"} (including both [ individual data points ]{style="color:green"} and [ a smoothed trend line ]{style="color:darkorange"}), distinguishing between [ different cities ]{style="color:blue"}.

### Game Plan

![](images/txhousing_plan.png)

### ggplot

```{r}
#| echo: false
sm_tx <- txhousing |>
  filter(city %in% c("Dallas","Fort Worth", "Austin",
                     "Houston", "El Paso"))
```

```{r}
#| echo: true
#| code-fold: true
ggplot(data = sm_tx,
       aes(x = date, y = median, color = city)) + 
  geom_point() + 
  geom_smooth(method = "loess") + 
  labs(x = "Date",
       y = "Median Home Price",
       title = "Texas Housing Prices")
```
:::

## Faceting

Extracts subsets of data and places them in side-by-side plots.

::: panel-tabset
### `facet_grid()`

```{r}
#| echo: true
#| fig-height: 3
#| fig-width: 12
#| code-line-numbers: "4"
#| code-fold: true
ggplot(data = sm_tx,
       aes(x = date, y = median)) + 
  geom_point() + 
  facet_grid(cols = vars(city)) +
  geom_smooth(method = "loess") + 
  labs(x = "Date",
       y = "Median Home Price",
       title = "Texas Housing Prices")
```

### `facet_wrap()`

```{r}
#| echo: true
#| fig-height: 3.5
#| fig-width: 8
#| code-line-numbers: "4"
#| code-fold: true
#| fig-align: center
ggplot(data = sm_tx,
       aes(x = date, y = median)) + 
  geom_point() + 
  facet_wrap(vars(city)) +
  geom_smooth(method = "loess") + 
  labs(x = "Date",
       y = "Median Home Price",
       title = "Texas Housing Prices")

```
:::

## Faceting

Extracts subsets of data and places them in side-by-side plots.

::: panel-tabset
### Options

<font size = "6">

-   `facet_grid(cols = vars(b))`: facet into columns based on b
-   `facet_grid(rows = vars(a))`: facet into rows based on a
-   `facet_grid(rows = vars(a), cols = vars(b))`: facet into both rows and columns
-   `facet_wrap(vars(b))`: wrap facets into a rectangular layout

</font>

### Scales

You can set scales to let axis limits vary across facets:

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

facet_grid(rows = vars(a),
           cols = vars(b),
           scales = ______)
```

<font size = "6">

-   `"fixed"` -- default, x- and y-axis limits are the same for each facet
-   `"free"` -- both x- and y-axis limits adjust to individual facets
-   `"free_x"` -- only x-axis limits adjust
-   `"free_y"` -- only y-axis limits adjust

</font>


### Labels

You can set a labeller to adjust facet labels.

<font size = "6">

Include both the variable name and factor name in the labels:

-   `facet_grid(cols = vars(b), labeller = label_both)`

Display math symbols in the labels:

-   `facet_grid(cols = vars(b), labeller = label_bquote(cols = alpha ^ .(b)))`
-   `facet_grid(cols = vars(b), labeller = label_parsed)`

</font>
:::

## Example Facet Labels


::: panel-tabset

### Example 1

Including the variable and facet names using `label_both`:

```{r}
#| echo: true
#| fig-height: 3
#| fig-width: 12
#| code-line-numbers: "4-5"
#| code-fold: true
ggplot(data = sm_tx,
       aes(x = date, y = median)) + 
  geom_point() + 
  facet_grid(cols = vars(city),
             labeller = label_both) +
  geom_smooth(method = "loess") + 
  labs(x = "Date",
       y = "Median Home Price",
       title = "Texas Housing Prices")
```


### Example 2

Including math labels in facet names using `label_bquote`:

```{r}
#| echo: true
#| fig-height: 3
#| fig-width: 12
#| code-line-numbers: "4-5"
#| code-fold: true
ggplot(data = sm_tx,
       aes(x = date, y = median)) + 
  geom_point() + 
  facet_grid(cols = vars(city),
             labeller = label_bquote(cols = .(city)^2)) +
  geom_smooth(method = "loess") + 
  labs(x = "Date",
       y = "Median Home Price",
       title = "Texas Housing Prices")
```

:::



## Statistical Transformation: `stat`

A `stat` transforms an existing variable into a new variable to plot.

-   `identity` leaves the data as is.
-   `count` counts the number of observations.
-   `summary` allows you to specify a desired transformation function.

. . .

Sometimes these statistical transformations happen under the hood when we call a `geom`.

## Statistical Transformation: `stat`

::: panel-tabset
### `stat_count()`

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| code-line-numbers: "3"
ggplot(data = mpg,
       mapping = aes(x = class)) +
  geom_bar()
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| code-line-numbers: "3"
ggplot(data = mpg,
       mapping = aes(x = class)) +
  stat_count(geom = "bar")
```
:::
:::

### `stat_summary()`

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| code-line-numbers: "4-5"
ggplot(data = mpg,
       mapping = aes(x = class,
                     y = hwy)) +
  stat_summary(geom = "bar",
               fun = "mean") +
  scale_y_continuous(limits = c(0,45))
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| code-line-numbers: "4-5"
ggplot(data = mpg,
       mapping = aes(x = class,
                     y = hwy)) +
  stat_summary(geom = "bar",
               fun = "max") +
  scale_y_continuous(limits = c(0,45))
```
:::
:::
:::

## Position Adjustements

Position adjustments determine how to arrange `geom`'s that would otherwise occupy the same space.

<font size = "6">

-   `position = 'dodge'`: Arrange elements side by side.
-   `position = 'fill'`: Stack elements on top of one another + normalize height.
-   `position = 'stack'`: Stack elements on top of one another.
-   `position = 'jitter"`: Add random noise to X & Y position of each element to avoid overplotting (see `geom_jitter()`). </font>

## Position Adjustements

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "2"
ggplot(mpg, aes(x = fl, fill = drv)) + 
  geom_bar(position = "_____")
```

![](images/position.png)

## Plot Customizations

::: panel-tabset
### Labels

```{r}
#| echo: true
#| code-line-numbers: "3-6"
#| fig-height: 4
#| fig-width: 6
#| fig-align: center
#| code-fold: true
ggplot(data = mpg) + 
  geom_jitter(mapping = aes(x = displ, y = hwy, color = cyl)) + 
  labs(x = "Engine Displacement (liters)", 
       y = "Highway MPG", 
       color = "Number of \nCylinders",
       title = "Car Efficiency")
```

### Themes

```{r}
#| echo: true
#| code-line-numbers: "7-8"
#| fig-height: 4
#| fig-width: 6
#| fig-align: center
#| code-fold: true
ggplot(data = mpg) + 
  geom_jitter(mapping = aes(x = displ, y = hwy, color = cyl)) + 
  labs(xlab = "Engine Displacement (liters)", 
       ylab = "Highway MPG", 
       color = "Number of \nCylinders",
       title = "Car Efficiency") +
  theme_bw() +
  theme(legend.position = "bottom")
```

### Scales: Axes Ticks

```{r}
#| echo: true
#| code-line-numbers: "6-9"
#| fig-height: 4
#| fig-width: 6
#| fig-align: center
#| code-fold: true
ggplot(data = mpg) + 
  geom_jitter(mapping = aes(x = displ, y = hwy, color = cyl)) + 
  labs(x     = "Engine Displacement (liters)",
       color = "Number of \nCylinders",
       title = "Car Efficiency") +
  scale_y_continuous("Highway MPG", 
                     limits = c(0,50),
                     breaks = seq(0,50,5))
```

### Scales: Color

```{r}
#| echo: true
#| code-line-numbers: "7"
#| fig-height: 4
#| fig-width: 6
#| fig-align: center
#| code-fold: true
ggplot(data = mpg) + 
  geom_jitter(mapping = aes(x = displ, y = hwy, color = cyl)) + 
  labs(x    = "Engine Displacement (liters)",
       y    = "Highway MPG",
       color = "Number of \nCylinders",
       title = "Car Efficiency") +
  scale_color_gradient(low = "white", high = "green4")
```
:::

## Formatting your Plot Code

It is good practice to put each `geom` and `aes` on a new line.

-   This makes code easier to read!
-   Generally: no line of code should be over 80 characters long.

::: panel-tabset
### Bad Practice

```{r}
#| echo: true
#| eval: false
ggplot(data = mpg, mapping = aes(x = cty, y = hwy, color = class)) + geom_point() + theme_bw() + labs(x = "City (mpg)", y = "Highway (mpg)")
```

### Good Practice

```{r}
#| echo: true
#| eval: false
ggplot(data = mpg, 
       mapping = aes(x = cty, 
                     y = hwy, 
                     color = class)) + 
  geom_point() + 
  theme_bw() + 
  labs(x = "City (mpg)", 
       y = "Highway (mpg)")
```

### Somewhere In Between

```{r}
#| echo: true
#| eval: false
ggplot(data = mpg, 
       mapping = aes(x = cty, y = hwy, color = class)) + 
  geom_point() + 
  theme_bw() + 
  labs(x = "City (mpg)", y = "Highway (mpg)")
```
:::

## Let's Practice!

How would you make this plot from the `diamonds` dataset in `ggplot2`?

::: columns
::: {.column width="90%"}
```{r}
#| echo: false
tmp <- diamonds
tmp$category <- cut(tmp$price, breaks = c(0, 999, 4999, Inf))
price_labs <- c("<$1k", "$1k-$5k", ">$5k")
names(price_labs) <- c("(0,999]","(999,5e+03]","(5e+03,Inf]")

ggplot(data = tmp,
       mapping = aes(x = cut,
                     fill = cut)) +
  geom_bar() +
  facet_wrap(.~category,
             labeller = labeller(category = price_labs)) +
  theme(axis.text.x = element_blank(),
        axis.title = element_text(size = 18),
        legend.title = element_text(size = 18),
        legend.text = element_text(size = 14),
        strip.text = element_text(size = 18))
```
:::

::: {.column width="10%"}
<br>

-   `data`
-   `aes`
-   `geom`
-   `facet`
:::
:::

## Creating a Game Plan

There are a lot of pieces to put together when creating a good graphic.

-   So, when sitting down to create a plot, you should first create a **game plan**!

. . .

This game plan should include:

1.  What data are you starting from?
2.  What are your x- and y-axes?
3.  What type(s) of `geom` do you need?
4.  What other `aes`'s do you need?

## 

::: panel-tabset
### Make a Game Plan!

Use the `mpg` dataset to create two side-by-side scatterplots of city MPG vs. highway MPG where the points are colored by the drive type (drv). The two plots should be separated by year.

![](images/empty_game_plan.png)

### Example

![](images/mpg_game_plan.png)

### R Code - Baseline Plot

```{r}
#| code-fold: true
#| echo: true
#| fig-height: 4.5
ggplot(data = mpg,
       mapping = aes(x = cty,
                     y = hwy,
                     color = drv)) +
  geom_point() +
  facet_grid(cols = vars(year))
```
### R Code - Formatted Plot

```{r}
#| code-fold: true
#| echo: true
#| fig-height: 4.5
ggplot(data = mpg,
       mapping = aes(x = cty,
                     y = hwy,
                     color = drv)) +
  geom_point() +
  facet_grid(cols = vars(year)) +
  labs(x = "city MPG",
       y = "highway MPG") +
  scale_color_discrete(name = "drive type",
                      labels = c("4-wheel","front","rear"))
```
:::

## PA 2: Using Data Visualization to Find the Penguins

![Artwork by Allison Horst](https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png)

## To do...

-   **PA 2: Using Data Visualization to Find the Penguins**
    -   Due Thursday (4/10) before class
-   **Lab 2: Exploring Rodents with `ggplot2`**
    -   Due Monday (4/14) at 11:59 pm
